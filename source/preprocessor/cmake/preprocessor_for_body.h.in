/* -- Definitions -- */

#cmakedefine PREPROCESSOR_FOR_SIZE @PREPROCESSOR_FOR_SIZE@

/* -- Macros -- */

/* Preprocessor foreach, it has a callback like: macro(value) for each element of the variadic arguments */
#define PREPROCESSOR_FOR_EACH_EVAL(expr) expr

#define PREPROCESSOR_FOR_EACH_IMPL_0(expr, ...)
#define PREPROCESSOR_FOR_EACH_IMPL_1(expr, element, ...) expr(element)
#if (defined(__cplusplus) && (__cplusplus >= 201103L)) || \
	(defined(__STDC__) && defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L))
#	define PREPROCESSOR_FOR_EACH_IMPL_2(expr, element, ...) \
	expr(element) PREPROCESSOR_FOR_EACH_EVAL(PREPROCESSOR_FOR_EACH_IMPL_1(expr, __VA_ARGS__, ~))
#else
#	define PREPROCESSOR_FOR_EACH_IMPL_2(expr, element, ...) \
	expr(element) PREPROCESSOR_FOR_EACH_EVAL(PREPROCESSOR_FOR_EACH_IMPL_1(expr, __VA_ARGS__))
#endif
@PREPROCESSOR_FOR_EACH_IMPL_BODY@
#if defined(__GNUC__) || defined(__clang__)
#	define PREPROCESSOR_FOR_EACH(expr, ...) \
		PREPROCESSOR_IF(PREPROCESSOR_ARGS_EMPTY(__VA_ARGS__), \
			PREPROCESSOR_EMPTY_SYMBOL(), \
			PREPROCESSOR_ARGS_N_IMPL(__VA_ARGS__, \
			@PREPROCESSOR_FOR_EACH_IMPL_GNUC_BODY@\
			PREPROCESSOR_FOR_EACH_IMPL_0)(expr, __VA_ARGS__))
#elif defined(_MSC_VER) && !defined(__clang__)
#	define PREPROCESSOR_FOR_EACH_IMPL_COUNT(count) \
		PREPROCESSOR_CONCAT(PREPROCESSOR_FOR_EACH_IMPL_, count)
#	define PREPROCESSOR_FOR_EACH_IMPL_EXPR(...) \
		PREPROCESSOR_FOR_EACH_IMPL_COUNT(PREPROCESSOR_ARGS_COUNT(__VA_ARGS__))
#	define PREPROCESSOR_FOR_EACH_EXPAND(expr, args) expr ## args
#	define PREPROCESSOR_FOR_EACH(expr, ...) \
		PREPROCESSOR_IF(PREPROCESSOR_ARGS_EMPTY(__VA_ARGS__), \
			PREPROCESSOR_EMPTY_SYMBOL(), \
			PREPROCESSOR_FOR_EACH_EXPAND(PREPROCESSOR_FOR_EACH_IMPL_EXPR(__VA_ARGS__), (expr, __VA_ARGS__)))
#else
#	error "Unkwnown preprocessor implementation for foreach."
#endif

/*
 * Preprocessor for, it has a callback like: macro(context, iterator, element) for each element of the variadic arguments,
 * where context is the second value passed to PREPROCESSOR_FOR, iterator is an integer indicating the current iteration,
 * and element is the current element being iterated
 */
#define PREPROCESSOR_FOR_EVAL(expr) expr

#define PREPROCESSOR_FOR_IMPL_0(expr, context, iterator, ...)
#define PREPROCESSOR_FOR_IMPL_1(expr, context, iterator, element, ...) expr(context, iterator, element)
#if (defined(__cplusplus) && (__cplusplus >= 201103L)) || \
	(defined(__STDC__) && defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L))
#	define PREPROCESSOR_FOR_IMPL_2(expr, context, iterator, element, ...) \
	expr(context, iterator, element) PREPROCESSOR_FOR_EVAL(PREPROCESSOR_FOR_IMPL_1(expr, context, PREPROCESSOR_INCREMENT(iterator), __VA_ARGS__, ~))
#else
#	define PREPROCESSOR_FOR_IMPL_2(expr, context, iterator, element, ...) \
	expr(context, iterator, element) PREPROCESSOR_FOR_EVAL(PREPROCESSOR_FOR_IMPL_1(expr, context, PREPROCESSOR_INCREMENT(iterator), __VA_ARGS__))
#endif
@PREPROCESSOR_FOR_IMPL_BODY@
#if defined(__GNUC__) || defined(__clang__)
#	define PREPROCESSOR_FOR(expr, context, ...) \
		PREPROCESSOR_IF(PREPROCESSOR_ARGS_EMPTY(__VA_ARGS__), \
			PREPROCESSOR_EMPTY_SYMBOL(), \
			PREPROCESSOR_ARGS_N_IMPL(__VA_ARGS__, \
			@PREPROCESSOR_FOR_IMPL_GNUC_BODY@\
			PREPROCESSOR_FOR_IMPL_0)(expr, context, 0, __VA_ARGS__))
#elif defined(_MSC_VER) && !defined(__clang__)
#	define PREPROCESSOR_FOR_IMPL_COUNT(count) \
		PREPROCESSOR_CONCAT(PREPROCESSOR_FOR_IMPL_, count)
#	define PREPROCESSOR_FOR_IMPL_EXPR(...) \
		PREPROCESSOR_FOR_IMPL_COUNT(PREPROCESSOR_ARGS_COUNT(__VA_ARGS__))
#	define PREPROCESSOR_FOR_EXPAND(expr, args) expr ## args
#	define PREPROCESSOR_FOR(expr, context, ...) \
		PREPROCESSOR_IF(PREPROCESSOR_ARGS_EMPTY(__VA_ARGS__), \
			PREPROCESSOR_EMPTY_SYMBOL(), \
			PREPROCESSOR_FOR_EXPAND(PREPROCESSOR_FOR_IMPL_EXPR(__VA_ARGS__), (expr, context, 0, __VA_ARGS__)))
#else
#	error "Unkwnown preprocessor implementation for for."
#endif
