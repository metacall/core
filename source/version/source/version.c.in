/*
 *	CMake Versioning Utility by Parra Studios
 *	A template for generating versioning utilities.
 *
 *	Copyright (C) 2016 - 2019 Vicente Eduardo Ferrer Garcia <vic798@gmail.com>
 *
 *	Licensed under the Apache License, Version 2.0 (the "License");
 *	you may not use this file except in compliance with the License.
 *	You may obtain a copy of the License at
 *
 *		http://www.apache.org/licenses/LICENSE-2.0
 *
 *	Unless required by applicable law or agreed to in writing, software
 *	distributed under the License is distributed on an "AS IS" BASIS,
 *	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *	See the License for the specific language governing permissions and
 *	limitations under the License.
 *
 */

/* -- Headers -- */

#include <${META_PROJECT_NAME_LOWER}/${META_PROJECT_NAME_LOWER}_version.h>

/* -- Methods -- */

const void * ${META_PROJECT_NAME}_version_data()
{
	static const struct ${META_PROJECT_NAME}_version_type version =
	{
		${META_PROJECT_NAME_UPPER}_VERSION_MAJOR_ID,
		${META_PROJECT_NAME_UPPER}_VERSION_MINOR_ID,
		${META_PROJECT_NAME_UPPER}_VERSION_PATCH_ID,
		${META_PROJECT_NAME_UPPER}_VERSION_REVISION,
		${META_PROJECT_NAME_UPPER}_VERSION,
		${META_PROJECT_NAME_UPPER}_NAME_VERSION
	};

	return &version;
}

uint32_t ${META_PROJECT_NAME}_version_hex_make(unsigned int major, unsigned int minor, unsigned int patch)
{
	const uint32_t version_hex = (major << 0x18) + (minor << 0x10) + patch;

	return version_hex;
}

uint32_t ${META_PROJECT_NAME}_version_hex()
{
	static const uint32_t version_hex =
		(${META_PROJECT_NAME_UPPER}_VERSION_MAJOR_ID << 0x18) +
		(${META_PROJECT_NAME_UPPER}_VERSION_MINOR_ID << 0x10) +
		${META_PROJECT_NAME_UPPER}_VERSION_PATCH_ID;

	return version_hex;
}

const char * ${META_PROJECT_NAME}_version_str()
{
	static const char version_string[] = ${META_PROJECT_NAME_UPPER}_VERSION;

	return version_string;
}

const char * ${META_PROJECT_NAME}_version_revision()
{
	static const char version_revision[] = ${META_PROJECT_NAME_UPPER}_VERSION_REVISION;

	return version_revision;
}

const char * ${META_PROJECT_NAME}_version_name()
{
	static const char version_name[] = ${META_PROJECT_NAME_UPPER}_NAME_VERSION;

	return version_name;
}
