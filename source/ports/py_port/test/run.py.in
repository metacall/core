#!/usr/bin/python3.5

import os
import sys

sys.path.append(os.environ['PORT_LIBRARY_PATH']);

import @PY_PORT_NAME@ as metacall

import unittest

class py_port_test(unittest.TestCase):

	# MetaCall (Python from memory)
	def test_python_memory(self):
		script = '#!/usr/bin/python3.5\ndef inline_multiply_mem(left, right):\n\treturn left * right\n';

		self.assertEqual(metacall.metacall_load_from_memory('py', script), 0);

		self.assertEqual(metacall.metacall('inline_multiply_mem', 2, 2), 4);

	# MetaCall (Python)
	def test_python(self):
		self.assertEqual(metacall.metacall_load_from_file('py', ['example.py']), 0);

		self.assertEqual(metacall.metacall('hello'), None);

		self.assertEqual(metacall.metacall('multiply', 5, 7), 35);

	# MetaCall (Ruby)
	def test_ruby(self):
		self.assertEqual(metacall.metacall_load_from_file('rb', ['hello.rb']), 0);

		self.assertEqual(metacall.metacall('say_null'), None);

		self.assertEqual(metacall.metacall('say_multiply', 3, 4), 12);

		self.assertEqual(metacall.metacall('say_hello', 'world'), 'Hello world!');

if __name__ == '__main__':
	unittest.main()
