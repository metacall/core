name: Cross-Platform Test

on:
  workflow_dispatch:
  pull_request:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - master

jobs:
  linux-test:
    name: Linux (Ubuntu) GCC Test
    runs-on: ubuntu-latest
    if: github.repository == 'metacall/core'
    strategy:
      matrix:
        buildtype: [debug, release]

    env:
      DEBIAN_FRONTEND:             noninteractive
      LTTNG_UST_REGISTER_TIMEOUT:  0
      NUGET_XMLDOC_MODE:           skip
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Revert the NodeJS version in order to use the system one instead (needed due to libnode)
      - name: Delete latest version of NodeJS
        run: |
          yes | sudo n uninstall
          # Source: https://github.com/tj/n/issues/540#issuecomment-443844202
          sudo rm -f "/usr/local/bin/node"
          sudo rm -f "/usr/local/bin/npm"
          sudo rm -f "/usr/local/bin/npx"
          sudo rm -rf "/usr/local/include/node"
          sudo rm -rf  "/usr/local/lib/dtrace/node.d"
          sudo rm -rf "/usr/local/lib/node_modules/npm"
          sudo rm -rf "/usr/local/share/doc/node"
          sudo rm -rf "/usr/local/share/man/man1/node.1"
          sudo rm -rf "/usr/local/share/systemtap/tapset/node.stp"
          # Creating a symbolic link to bypass path reference bug
          sudo ln -s /usr/bin/node /usr/local/bin/node
          sudo ln -s /usr/bin/npm /usr/local/bin/npm
          sudo ln -s /usr/bin/npx /usr/local/bin/npx

      - name: Set up the environment
        run: sudo ./tools/metacall-environment.sh ${METACALL_INSTALL_OPTIONS}
        env:
          METACALL_INSTALL_OPTIONS:    base python ruby netcore5 nodejs typescript file rpc wasm java c cobol rust rapidjson funchook swig pack backtrace

      - name: Configure
        run: |
          export "METACALL_PATH=$(pwd)"
          export "LOADER_LIBRARY_PATH=${METACALL_PATH}/build"
          export "LOADER_SCRIPT_PATH=${METACALL_PATH}/build/scripts"
          export "CONFIGURATION_PATH=${METACALL_PATH}/build/configurations/global.json"
          export "SERIAL_LIBRARY_PATH=${METACALL_PATH}/build"
          export "DETOUR_LIBRARY_PATH=${METACALL_PATH}/build"
          export "PORT_LIBRARY_PATH=${METACALL_PATH}/build"
          mkdir -p build
          cd build
          sudo "${METACALL_PATH}/tools/metacall-configure.sh" ${METACALL_BUILD_TYPE} ${METACALL_BUILD_OPTIONS}
        env:
          NODE_PATH:                   /usr/lib/node_modules
          METACALL_BUILD_TYPE:         ${{ matrix.buildtype }}
          METACALL_BUILD_OPTIONS:      python ruby netcore5 nodejs typescript file rpc wasm java c cobol rust examples tests scripts ports dynamic install pack benchmarks

      - name: Build
        run: |
          export "METACALL_PATH=$(pwd)"
          export "LOADER_LIBRARY_PATH=${METACALL_PATH}/build"
          export "LOADER_SCRIPT_PATH=${METACALL_PATH}/build/scripts"
          export "CONFIGURATION_PATH=${METACALL_PATH}/build/configurations/global.json"
          export "SERIAL_LIBRARY_PATH=${METACALL_PATH}/build"
          export "DETOUR_LIBRARY_PATH=${METACALL_PATH}/build"
          export "PORT_LIBRARY_PATH=${METACALL_PATH}/build"
          cd build
          sudo "${METACALL_PATH}/tools/metacall-build.sh" ${METACALL_BUILD_TYPE} ${METACALL_BUILD_OPTIONS}
        env:
          NODE_PATH:                   /usr/lib/node_modules
          METACALL_BUILD_TYPE:         ${{ matrix.buildtype }}
          METACALL_BUILD_OPTIONS:      python ruby netcore5 nodejs typescript file rpc wasm java c cobol rust examples tests scripts ports dynamic install pack benchmarks

  windows-test:
    name: Windows MSVC Test
    runs-on: windows-2019
    strategy:
      matrix:
        buildtype: [debug, release]

    env:
      LTTNG_UST_REGISTER_TIMEOUT:  0
      NUGET_XMLDOC_MODE:           skip
      DOTNET_CLI_TELEMETRY_OPTOUT: 'true'

    steps:
      - name: Check out the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Activate the Visual Studio Developer Prompt
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64

      - name: Set up the environment
        run: cmd.exe /c "powershell .\tools\metacall-environment.ps1 $Env:METACALL_INSTALL_OPTIONS"
        env:
          METACALL_INSTALL_OPTIONS:    base python nodejs nasm ruby # dotnet # netcore5 typescript file rpc wasm java c cobol rust rapidjson funchook swig pack # clangformat v8rep51 coverage

      - name: Run the configuration script
        run: |
          $METACALL_PATH = $PWD
          md -Force "$METACALL_PATH\build"
          cd "$METACALL_PATH\build"
          cmd.exe /c "powershell ..\tools\metacall-configure.ps1 $Env:METACALL_BUILD_TYPE $Env:METACALL_BUILD_OPTIONS"
        env:
          METACALL_BUILD_TYPE:         ${{ matrix.buildtype }}
          METACALL_BUILD_OPTIONS:      python nodejs tests scripts ports ruby # dotnet # thread-sanitizer root netcore5 typescript file rpc wasm java c cobol rust examples dynamic install pack benchmarks # sanitizer v8 coverage

      - name: Build the core
        working-directory: ./build
        run: cmd.exe /c "powershell ..\tools\metacall-build.ps1 $Env:METACALL_BUILD_TYPE $Env:METACALL_BUILD_OPTIONS"
        env:
          METACALL_BUILD_TYPE:         ${{ matrix.buildtype }}
          METACALL_BUILD_OPTIONS:      tests # coverage install
