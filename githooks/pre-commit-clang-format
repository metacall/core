#!/usr/bin/env bash

# git pre-commit hook that runs a clang-format stylecheck.
# Features:
#  - abort commit when commit does not comply with the style guidelines
#  - create a patch of the proposed style changes
# Modifications for clang-format by rene.milk@wwu.de

# This file is part of a set of unofficial pre-commit hooks available
# at github.
# Link:    https://github.com/githubbrowser/Pre-commit-hooks
# Contact: David Martin, david.martin.mailbox@googlemail.com

# Some quality of life modifications made for Godot Engine.

# Some modifs for Metacall

##################################################################
# SETTINGS
# Set path to clang-format binary.

# To get consistent formatting, we recommend contributors to use the same
# clang-format version as CI.
RECOMMENDED_CLANG_FORMAT_MAJOR="11"

CLANG_FORMAT=`which clang-format-$RECOMMENDED_CLANG_FORMAT_MAJOR 2>/dev/null`
if [ -z "$CLANG_FORMAT" ]; then
  CLANG_FORMAT=`which clang-format 2>/dev/null`
fi

# Remove any older patches from previous commits. Set to true or false.
DELETE_OLD_PATCHES=false

# Only parse files with the extensions in FILE_EXTS. Set to true or false.
# If false every changed file in the commit will be parsed with clang-format.
# If true only files matching one of the extensions are parsed with clang-format.
PARSE_EXTS=true

# File types to parse. Only effective when PARSE_EXTS is true.
FILE_EXTS=".c .h .cpp .hpp .cc .hh .cxx"

# Use pygmentize instead of cat to parse diff with highlighting.
# Install it with `pip install pygments` (Linux) or `easy_install Pygments` (Mac)
PYGMENTIZE=`which pygmentize 2>/dev/null`
if [ ! -z "$PYGMENTIZE" ]; then
  READER="pygmentize -l diff"
else
  READER=cat
fi

# Path to zenity
ZENITY=`which zenity 2>/dev/null`

# Path to xmessage
XMSG=`which xmessage 2>/dev/null`

# Path to powershell (Windows only)
PWSH=`which powershell 2>/dev/null`

##################################################################
# There should be no need to change anything below this line.

. "$(dirname -- "$0")/canonicalize_filename.sh"

# exit on error
set -e

# check whether the given file matches any of the set extensions
matches_extension() {
    local filename=$(basename "$1")
    local extension=".${filename##*.}"
    local ext

    for ext in $FILE_EXTS; do [[ "$ext" == "$extension" ]] && return 0; done

    return 1
}

# necessary check for initial commit
if git rev-parse --verify HEAD >/dev/null 2>&1 ; then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi

if [ ! -x "$CLANG_FORMAT" ] ; then
	message="Error: clang-format executable not found. Please install clang-format $RECOMMENDED_CLANG_FORMAT_MAJOR.x.x."

    if [ ! -t 1 ] ; then
        if [ -x "$ZENITY" ] ; then
            $ZENITY --error --title="Error" --text="$message"
            exit 1
        elif [ -x "$XMSG" ] ; then
            $XMSG -center -title "Error" "$message"
            exit 1
        elif [ \( \( "$OSTYPE" = "msys" \) -o \( "$OSTYPE" = "win32" \) \) -a \( -x "$PWSH" \) ]; then
            winmessage="$(canonicalize_filename "./.git/hooks/winmessage.ps1")"
            $PWSH -noprofile -executionpolicy bypass -file "$winmessage" -center -title "Error" --text "$message"
            exit 1
        fi
    fi
    printf "$message\n"
    printf "Set the correct path in $(canonicalize_filename "$0").\n"
    exit 1
fi

# CLANG_FORMAT_VERSION="$(clang-format --version | cut -d' ' -f3)"
# CLANG_FORMAT_MAJOR="$(echo "$CLANG_FORMAT_VERSION" | cut -d'.' -f1)"

# if [ "$CLANG_FORMAT_MAJOR" != "$RECOMMENDED_CLANG_FORMAT_MAJOR" ]; then
#     echo "Warning: Your clang-format binary is the wrong version ($CLANG_FORMAT_VERSION, expected $RECOMMENDED_CLANG_FORMAT_MAJOR.x.x)."
#     echo "         Consider upgrading or downgrading clang-format as formatting may not be applied correctly."
# fi

# create a random filename to store our generated patch
prefix="pre-commit-clang-format"
suffix="$(date +%s)"
patch="/tmp/$prefix-$suffix.patch"

# clean up any older clang-format patches
$DELETE_OLD_PATCHES && rm -f /tmp/$prefix*.patch

# create one patch containing all changes to the files
git diff-index --cached --diff-filter=ACMR --name-only $against -- | while read file;
do
    # ignore thirdparty folder
    #if grep -q "thirdparty" <<< $file; then
    #    continue;
    #fi

    # Only files from source folder
    if grep -q "source" <<< $file; then
        : # Correct
    else
        continue;
    fi


    # ignore file if we do check for file extensions and the file
    # does not match any of the extensions specified in $FILE_EXTS
    if $PARSE_EXTS && ! matches_extension "$file"; then
        continue;
    fi

    # clang-format our sourcefile, create a patch with diff and append it to our $patch
    # The sed call is necessary to transform the patch from
    #    --- $file timestamp
    #    +++ - timestamp
    # to both lines working on the same file and having a/ and b/ prefix.
    # Else it can not be applied with 'git apply'.
    "$CLANG_FORMAT" -style=file "$file" | \
        diff -u "$file" - | \
        sed -e "1s|--- |--- a/|" -e "2s|+++ -|+++ b/$file|" >> "$patch"
done

# if no patch has been generated all is ok, clean up the file stub and exit
if [ ! -s "$patch" ] ; then
    printf "Files in this commit comply with the clang-format rules.\n"
    rm -f "$patch"
    exit 0
fi

# a patch has been created, notify the user and exit
printf "\nThe following differences were found between the code to commit "
printf "and the clang-format rules:\n\n"

if [ -t 1 ] ; then
    $READER "$patch"
    printf "\n"
    # Allows us to read user input below, assigns stdin to keyboard
    exec < /dev/tty
    terminal="1"
else
    cat "$patch"
    printf "\n"
    # Allows non zero zenity/powershell output
    set +e
    terminal="0"
fi

while true; do
    if [ $terminal = "0" ] ; then
        if [ -x "$ZENITY" ] ; then
            ans=$($ZENITY --text-info --filename="$patch" --width=800 --height=600 --title="Do you want to apply that patch?" --ok-label="Apply" --cancel-label="Do not apply" --extra-button="Apply and stage")
            if [ "$?" = "0" ] ; then
                yn="Y"
            else
                if [ "$ans" = "Apply and stage" ] ; then
                    yn="S"
                else
                    yn="N"
                fi
            fi
        elif [ -x "$XMSG" ] ; then
            $XMSG -file "$patch" -buttons "Apply":100,"Apply and stage":200,"Do not apply":0 -center -default "Do not apply" -geometry 800x600 -title "Do you want to apply that patch?"
            ans=$?
            if [ "$ans" = "100" ] ; then
                yn="Y"
            elif [ "$ans" = "200" ] ; then
                yn="S"
            else
                yn="N"
            fi
        elif [ \( \( "$OSTYPE" = "msys" \) -o \( "$OSTYPE" = "win32" \) \) -a \( -x "$PWSH" \) ]; then
            winmessage="$(canonicalize_filename "./.git/hooks/winmessage.ps1")"
            $PWSH -noprofile -executionpolicy bypass -file "$winmessage" -file "$patch" -buttons "Apply":100,"Apply and stage":200,"Do not apply":0 -center -default "Do not apply" -geometry 800x600 -title "Do you want to apply that patch?"
            ans=$?
            if [ "$ans" = "100" ] ; then
                yn="Y"
            elif [ "$ans" = "200" ] ; then
                yn="S"
            else
                yn="N"
            fi
        else
            printf "Error: zenity, xmessage, or powershell executable not found.\n"
            exit 1
        fi
    else
        read -p "Do you want to apply that patch (Y - Apply, N - Do not apply, S - Apply and stage files)? [Y/N/S] " yn
    fi
    case $yn in
        [Yy] ) git apply $patch;
        printf "The patch was applied. You can now stage the changes and commit again.\n\n";
        break
        ;;
        [Nn] ) printf "\nYou can apply these changes with:\n  git apply $patch\n";
        printf "(may need to be called from the root directory of your repository)\n";
        printf "Aborting commit. Apply changes and commit again or skip checking with";
        printf " --no-verify (not recommended).\n\n";
        break
        ;;
        [Ss] ) git apply $patch;
        git diff-index --cached --diff-filter=ACMR --name-only $against -- | while read file;
        do git add $file;
        done
        printf "The patch was applied and the changed files staged. You can now commit.\n\n";
        break
        ;;
        * ) echo "Please answer yes or no."
        ;;
    esac
done
exit 1 # we don't commit in any case
